{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","monster","alt","src","id","name","email","CardList","monsters","map","m","App","props","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2UAIaA,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KCPDI,G,YAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAClB,sBAAKJ,UAAW,iBAAhB,UACE,qBACEK,IAAI,UACJC,IAAG,+BAA0BF,EAAQG,GAAlC,4BAEL,6BAAKH,EAAQI,OACb,4BAAIJ,EAAQK,aCNHC,EAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACvB,qBAAKX,UAAW,YAAhB,SACEW,EAASC,KAAI,SAACC,GAAD,OACb,cAAC,EAAD,CAAiBT,QAASS,GAAfA,EAAEN,UCqCDO,E,kDArCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaRhB,aAAe,SAACiB,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXV,SAAU,GACVO,YAAa,IAJE,E,qDAQnB,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEN,SAAUe,S,oBAO/C,WACE,MAAkCC,KAAKN,MAA/BV,EAAR,EAAQA,SAAUO,EAAlB,EAAkBA,YACZU,EAAmBjB,EAASkB,QAAO,SAAChB,GAAD,OACvCA,EAAEL,KAAKsB,cAAcC,SAASb,EAAYY,kBAG5C,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEF,YAAY,kBACZC,aAAc4B,KAAK5B,eAErB,cAAC,EAAD,CAAUY,SAAUiB,W,GAhCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5a379d09.chunk.js","sourcesContent":["import React from 'react';\n\nimport './search-box.tyles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className='search'\n    type='search'\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n","import './card-styles.css';\n\nexport const Card = ({ monster }) => (\n  <div className={'card-container'}>\n    <img\n      alt='monster'\n      src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\n    />\n    <h2>{monster.name}</h2>\n    <p>{monster.email}</p>\n  </div>\n);\n","import './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = ({monsters}) => (\n\t<div className={'card-list'}>\n\t\t{monsters.map((m) => (\n\t\t\t<Card key={m.id} monster={m} />\n\t\t))}\n\t</div>\n);","import './App.css';\nimport React, { Component } from 'react';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { CardList } from './components/card-list/card-list.component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((res) => res.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((m) =>\n      m.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}